from _typeshed import Incomplete

multilibArches: dict[str, tuple[str]]
arches: dict[str, str]

def legitMultiArchesInSameLib(arch: Incomplete | None = ...): ...
def canCoinstall(arch1, arch2): ...
def archDifference(myarch, targetarch): ...
def score(arch): ...
def isMultiLibArch(arch: Incomplete | None = ...): ...
def getBestArchFromList(archlist, myarch: Incomplete | None = ...): ...
def getArchList(thisarch: Incomplete | None = ...): ...
def getCanonX86Arch(arch): ...
def getCanonARMArch(arch): ...
def getCanonPPCArch(arch): ...
def getCanonSPARCArch(arch): ...
def getCanonX86_64Arch(arch): ...

def getCanonArch(
        skipRpmPlatform: int = ...) -> str:
    ...

canonArch: str

def getMultiArchInfo(arch=...): ...
def getBestArch(myarch: Incomplete | None = ...): ...
def getBaseArch(myarch: Incomplete | None = ...): ...

class ArchStorage:
    canonarch: Incomplete
    basearch: Incomplete
    bestarch: Incomplete
    compatarches: Incomplete
    archlist: Incomplete
    multilib: bool
    def __init__(self) -> None: ...
    legit_multi_arches: Incomplete
    def setup_arch(self, arch: Incomplete | None = ..., archlist_includes_compat_arch: bool = ...) -> None: ...
    def get_best_arch_from_list(self, archlist, fromarch: Incomplete | None = ...): ...
    def score(self, arch): ...
    def get_arch_list(self, arch): ...
