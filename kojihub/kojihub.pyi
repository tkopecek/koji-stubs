from typing import Any, Optional, Union

import logging
import koji.policy
import koji.xmlrpcplus
from koji import _NVRInfo

logger: logging.Logger

NUMERIC_TYPES: tuple[type]

def log_error(msg: Any) -> None: ...
def xform_user_krb(entry: dict) -> dict: ...

def convert_value(
    value: Any,
    cast: Optional[type] = ...,
    message: Optional[str] = ...,
    exc_type: Exception = ...,
    none_allowed: bool = ...,
    check_only: bool = ...):
    ...


class Task:
    fields: tuple[tuple[str, str]] = ...
    id: int = ...
    logger: Any = ...
    def __init__(self, id: int) -> None: ...
    def verifyHost(self, host_id: Optional[int] = ...) -> bool: ...
    def assertHost(self, host_id: int) -> None: ...
    def getOwner(self) -> int: ...
    def verifyOwner(self, user_id: Optional[int] = ...) -> bool: ...
    def assertOwner(self, user_id: Optional[int] = ...) -> None: ...
    def lock(self, host_id: int, newstate: str = ..., force: bool = ...) -> bool: ...
    def assign(self, host_id: int, force: bool = ...) -> bool: ...
    def open(self, host_id: int): ...
    def free(self) -> bool: ...
    def setWeight(self, weight: float) -> None: ...
    def setPriority(self, priority: int, recurse: bool = ...) -> None: ...
    def close(self, result: str) -> None: ...
    def fail(self, result: str) -> None: ...
    def getState(self) -> int: ...
    def isFinished(self) -> bool: ...
    def isCanceled(self) -> bool: ...
    def isFailed(self) -> bool: ...
    def cancel(self, recurse: bool = ...) -> bool: ...
    def cancelChildren(self) -> None: ...
    def cancelFull(self, strict: bool = ...): ...
    def getRequest(self): ...
    def getResult(self, raise_fault: bool = ...) -> dict: ...
    def getInfo(self, strict: bool = ..., request: bool = ...) -> dict: ...
    def getChildren(self, request: bool = ...) -> list[dict]: ...
    def runCallbacks(self,
                     cbtype: str,
                     old_info: dict,
                     attr: str,
                     new_val: dict) -> None: ...

def make_task(method: Any, arglist: Any, **opts: Any): ...
def eventCondition(event: Any, table: Optional[Any] = ...): ...
def readInheritanceData(tag_id: Any, event: Optional[Any] = ...): ...
def readDescendantsData(tag_id: Any, event: Optional[Any] = ...): ...
def writeInheritanceData(tag_id: Any, changes: Any, clear: bool = ...) -> None: ...
def readFullInheritance(tag_id: Any, event: Optional[Any] = ..., reverse: bool = ...): ...
def readFullInheritanceRecurse(tag_id: Any, event: Any, order: Any, top: Any, hist: Any, currdepth: Any, maxdepth: Any, noconfig: Any, pfilter: Any, reverse: Any) -> None: ...
def pkglist_add(taginfo: Any, pkginfo: Any, owner: Optional[Any] = ..., block: Optional[Any] = ..., extra_arches: Optional[Any] = ..., force: bool = ..., update: bool = ...): ...
def pkglist_remove(taginfo: Any, pkginfo: Any, force: bool = ...) -> None: ...
def pkglist_block(taginfo: Any, pkginfo: Any, force: bool = ...) -> None: ...
def pkglist_unblock(taginfo: Any, pkginfo: Any, force: bool = ...) -> None: ...
def pkglist_setowner(taginfo: Any, pkginfo: Any, owner: Any, force: bool = ...) -> None: ...
def pkglist_setarches(taginfo: Any, pkginfo: Any, arches: Any, force: bool = ...) -> None: ...
def readPackageList(tagID: Optional[Any] = ..., userID: Optional[Any] = ..., pkgID: Optional[Any] = ..., event: Optional[Any] = ..., inherit: bool = ..., with_dups: bool = ..., with_owners: bool = ...): ...
def list_tags(build: Optional[Any] = ..., package: Optional[Any] = ..., perms: bool = ..., queryOpts: Optional[Any] = ..., pattern: Optional[Any] = ...): ...
def readTaggedBuilds(tag: Any, event: Optional[Any] = ..., inherit: bool = ..., latest: bool = ..., package: Optional[Any] = ..., owner: Optional[Any] = ..., type: Optional[Any] = ...): ...
def readTaggedRPMS(tag: Any, package: Optional[Any] = ..., arch: Optional[Any] = ..., event: Optional[Any] = ..., inherit: bool = ..., latest: bool = ..., rpmsigs: bool = ..., owner: Optional[Any] = ..., type: Optional[Any] = ...): ...
def readTaggedArchives(tag: Any, package: Optional[Any] = ..., event: Optional[Any] = ..., inherit: bool = ..., latest: bool = ..., type: Optional[Any] = ...): ...
def check_tag_access(tag_id: Any, user_id: Optional[Any] = ...): ...
def assert_tag_access(tag_id: Any, user_id: Optional[Any] = ..., force: bool = ...) -> None: ...
def grplist_add(taginfo: Any, grpinfo: Any, block: bool = ..., force: bool = ..., **opts: Any) -> None: ...
def grplist_remove(taginfo: Any, grpinfo: Any, force: bool = ...) -> None: ...
def grplist_block(taginfo: Any, grpinfo: Any) -> None: ...
def grplist_unblock(taginfo: Any, grpinfo: Any) -> None: ...
def grp_pkg_add(taginfo: Any, grpinfo: Any, pkg_name: Any, block: bool = ..., force: bool = ..., **opts: Any) -> None: ...
def grp_pkg_remove(taginfo: Any, grpinfo: Any, pkg_name: Any, force: bool = ...) -> None: ...
def grp_pkg_block(taginfo: Any, grpinfo: Any, pkg_name: Any) -> None: ...
def grp_pkg_unblock(taginfo: Any, grpinfo: Any, pkg_name: Any) -> None: ...
def grp_req_add(taginfo: Any, grpinfo: Any, reqinfo: Any, block: bool = ..., force: bool = ..., **opts: Any) -> None: ...
def grp_req_remove(taginfo: Any, grpinfo: Any, reqinfo: Any, force: bool = ...) -> None: ...
def grp_req_block(taginfo: Any, grpinfo: Any, reqinfo: Any) -> None: ...
def grp_req_unblock(taginfo: Any, grpinfo: Any, reqinfo: Any) -> None: ...
def get_tag_groups(tag: Any, event: Optional[Any] = ..., inherit: bool = ..., incl_pkgs: bool = ..., incl_reqs: bool = ...): ...
def readTagGroups(tag: Any, event: Optional[Any] = ..., inherit: bool = ..., incl_pkgs: bool = ..., incl_reqs: bool = ..., incl_blocked: bool = ...): ...
def set_host_enabled(hostname: Any, enabled: bool = ...) -> None: ...
def add_host_to_channel(hostname: Any, channel_name: Any, create: bool = ..., force: bool = ...) -> None: ...
def remove_host_from_channel(hostname: Any, channel_name: Any) -> None: ...
def rename_channel(old: Any, new: Any) -> None: ...
def edit_channel(channelInfo: Any, **kw: Any): ...
def remove_channel(channel_name: Any, force: bool = ...) -> None: ...
def add_channel(channel_name: Any, description: Optional[Any] = ...): ...
def set_channel_enabled(channelname: Any, enabled: bool = ..., comment: Optional[Any] = ...) -> None: ...
def get_ready_hosts(): ...
def get_all_arches(): ...
def get_active_tasks(host: Optional[Any] = ...): ...
def get_task_descendents(task: Any, childMap: Optional[Any] = ..., request: bool = ...): ...
def maven_tag_archives(tag_id: Any, event_id: Optional[Any] = ..., inherit: bool = ...): ...
def repo_init(tag: Any, task_id: Optional[Any] = ..., with_src: bool = ..., with_debuginfo: bool = ..., event: Optional[Any] = ..., with_separate_src: bool = ...): ...
def dist_repo_init(tag: Any, keys: Any, task_opts: Any): ...
def repo_set_state(repo_id: Any, state: Any, check: bool = ...) -> None: ...
def repo_info(repo_id: Any, strict: bool = ...): ...
def repo_ready(repo_id: Any) -> None: ...
def repo_expire(repo_id: Any) -> None: ...
def repo_problem(repo_id: Any) -> None: ...
def repo_delete(repo_id: Any): ...
def repo_expire_older(tag_id: Any, event_id: Any, dist: Optional[Any] = ...) -> None: ...
def repo_references(repo_id: Any): ...
def get_active_repos(): ...
def tag_changed_since_event(event: Any, taglist: Any): ...
def set_tag_update(tag_id: Any, utype: Any, event_id: Optional[Any] = ..., user_id: Optional[Any] = ...) -> None: ...
def create_build_target(name: Any, build_tag: Any, dest_tag: Any): ...
def edit_build_target(buildTargetInfo: Any, name: Any, build_tag: Any, dest_tag: Any) -> None: ...
def delete_build_target(buildTargetInfo: Any) -> None: ...
def get_build_targets(info: Optional[Any] = ..., event: Optional[Any] = ..., buildTagID: Optional[Any] = ..., destTagID: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
def get_build_target(info: Any, event: Optional[Any] = ..., strict: bool = ...): ...

def lookup_name(
        table: str,
        info: Union[str, int],
        strict: bool = ...,
        create: bool = ...) -> Optional[dict[str, Any]]:
    ...

def get_id(table: Any, info: Any, strict: bool = ..., create: bool = ...): ...
def get_tag_id(info: Any, strict: bool = ..., create: bool = ...): ...
def lookup_tag(info: Any, strict: bool = ..., create: bool = ...): ...
def get_perm_id(info: Any, strict: bool = ..., create: bool = ...): ...
def lookup_perm(info: Any, strict: bool = ..., create: bool = ...): ...
def get_package_id(info: Any, strict: bool = ..., create: bool = ...): ...
def lookup_package(info: Any, strict: bool = ..., create: bool = ...): ...
def get_channel_id(info: Any, strict: bool = ..., create: bool = ...): ...
def lookup_channel(info: Any, strict: bool = ..., create: bool = ...): ...
def get_group_id(info: Any, strict: bool = ..., create: bool = ...): ...
def lookup_group(info: Any, strict: bool = ..., create: bool = ...): ...
def get_build_target_id(info: Any, strict: bool = ..., create: bool = ...): ...
def lookup_build_target(info: Any, strict: bool = ..., create: bool = ...): ...
def create_tag(name: Any, parent: Optional[Any] = ..., arches: Optional[Any] = ..., perm: Optional[Any] = ..., locked: bool = ..., maven_support: bool = ..., maven_include_all: bool = ..., extra: Optional[Any] = ...): ...
def get_tag(tagInfo: Any, strict: bool = ..., event: Optional[Any] = ..., blocked: bool = ...): ...
def get_tag_extra(tagInfo: Any, event: Optional[Any] = ..., blocked: bool = ...): ...
def edit_tag(tagInfo: Any, **kwargs: Any) -> None: ...
def old_edit_tag(tagInfo: Any, name: Any, arches: Any, locked: Any, permissionID: Any, extra: Optional[Any] = ...): ...
def delete_tag(tagInfo: Any) -> None: ...
def get_external_repo_id(info: Any, strict: bool = ..., create: bool = ...): ...
def create_external_repo(name: Any, url: Any): ...
def get_external_repos(info: Optional[Any] = ..., url: Optional[Any] = ..., event: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
def get_external_repo(info: Any, strict: bool = ..., event: Optional[Any] = ...): ...
def edit_external_repo(info: Any, name: Optional[Any] = ..., url: Optional[Any] = ...) -> None: ...
def delete_external_repo(info: Any) -> None: ...
def add_external_repo_to_tag(tag_info: Any, repo_info: Any, priority: Any, merge_mode: str = ..., arches: Optional[Any] = ...) -> None: ...
def remove_external_repo_from_tag(tag_info: Any, repo_info: Any) -> None: ...
def edit_tag_external_repo(tag_info: Any, repo_info: Any, priority: Optional[Any] = ..., merge_mode: Optional[Any] = ..., arches: Optional[Any] = ...): ...
def get_tag_external_repos(tag_info: Optional[Any] = ..., repo_info: Optional[Any] = ..., event: Optional[Any] = ...): ...
def get_external_repo_list(tag_info: Any, event: Optional[Any] = ...): ...
def get_user(userInfo: Optional[Any] = ..., strict: bool = ..., krb_princs: bool = ...): ...
def edit_user(userInfo: Any, name: Optional[Any] = ..., krb_principal_mappings: Optional[Any] = ...) -> None: ...
def list_user_krb_principals(user_info: Optional[Any] = ...): ...
def get_user_by_krb_principal(krb_principal: Any, strict: bool = ..., krb_princs: bool = ...): ...
def find_build_id(X: Any, strict: bool = ...): ...

def get_build(
        buildInfo: Any,
        strict: bool = ...) -> _NVRInfo:
    ...

def get_build_logs(build: Any): ...

def get_next_release(build_info: Any): ...
def get_rpm(rpminfo: Any, strict: bool = ..., multi: bool = ...): ...
def list_rpms(buildID: Optional[Any] = ..., buildrootID: Optional[Any] = ..., imageID: Optional[Any] = ..., componentBuildrootID: Optional[Any] = ..., hostID: Optional[Any] = ..., arches: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
def get_maven_build(buildInfo: Any, strict: bool = ...): ...
def get_win_build(buildInfo: Any, strict: bool = ...): ...
def get_image_build(buildInfo: Any, strict: bool = ...): ...
def get_build_type(buildInfo: Any, strict: bool = ...): ...
def list_btypes(query: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
def add_btype(name: Any) -> None: ...
def list_archives(buildID: Optional[Any] = ..., buildrootID: Optional[Any] = ..., componentBuildrootID: Optional[Any] = ..., hostID: Optional[Any] = ..., type: Optional[Any] = ..., filename: Optional[Any] = ..., size: Optional[Any] = ..., checksum: Optional[Any] = ..., typeInfo: Optional[Any] = ..., queryOpts: Optional[Any] = ..., imageID: Optional[Any] = ..., archiveID: Optional[Any] = ..., strict: bool = ...): ...
def get_archive(archive_id: Any, strict: bool = ...): ...
def get_maven_archive(archive_id: Any, strict: bool = ...): ...
def get_win_archive(archive_id: Any, strict: bool = ...): ...
def get_image_archive(archive_id: Any, strict: bool = ...): ...
def list_archive_files(archive_id: Any, queryOpts: Optional[Any] = ..., strict: bool = ...): ...
def get_archive_file(archive_id: Any, filename: Any, strict: bool = ...): ...
def list_task_output(taskID: Any, stat: bool = ..., all_volumes: bool = ..., strict: bool = ...): ...
def get_host(hostInfo: Any, strict: bool = ..., event: Optional[Any] = ...): ...
def edit_host(hostInfo: Any, **kw: Any): ...
def get_channel(channelInfo: Any, strict: bool = ...): ...
def query_buildroots(hostID: Optional[Any] = ..., tagID: Optional[Any] = ..., state: Optional[Any] = ..., rpmID: Optional[Any] = ..., archiveID: Optional[Any] = ..., taskID: Optional[Any] = ..., buildrootID: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
def get_buildroot(buildrootID: Any, strict: bool = ...): ...
def list_channels(hostID: Optional[Any] = ..., event: Optional[Any] = ..., enabled: Optional[Any] = ...): ...
def new_package(name: Any, strict: bool = ...): ...
def add_volume(name: Any, strict: bool = ...): ...
def remove_volume(volume: Any) -> None: ...
def list_volumes(): ...
def change_build_volume(build: Any, volume: Any, strict: bool = ...) -> None: ...
def ensure_volume_symlink(binfo: Any) -> None: ...
def check_volume_policy(data: Any, strict: bool = ..., default: Optional[Any] = ...): ...
def apply_volume_policy(build: Any, strict: bool = ...) -> None: ...
def new_build(data: Any, strict: bool = ...): ...
def recycle_build(old: Any, data: Any) -> None: ...
def check_noarch_rpms(basepath: Any, rpms: Any, logs: Optional[Any] = ...): ...
def import_build(srpm: Any, rpms: Any, brmap: Optional[Any] = ..., task_id: Optional[Any] = ..., build_id: Optional[Any] = ..., logs: Optional[Any] = ...): ...
def import_rpm(fn: Any, buildinfo: Optional[Any] = ..., brootid: Optional[Any] = ..., wrapper: bool = ..., fileinfo: Optional[Any] = ...): ...
def generate_token(nbytes: int = ...): ...
def get_reservation_token(build_id: Any): ...
def clear_reservation(build_id: Any) -> None: ...
def cg_init_build(cg: Any, data: Any): ...
def cg_refund_build(cg: Any, build_id: Any, token: Any, state: Any = ...) -> None: ...
def cg_import(metadata: Any, directory: Any, token: Optional[Any] = ...): ...

class CG_Importer:
    buildinfo: Any = ...
    metadata_only: bool = ...
    def __init__(self) -> None: ...
    directory: Any = ...
    def do_import(self, metadata: Any, directory: Any, token: Optional[Any] = ...): ...
    metadata: Any = ...
    raw_metadata: Any = ...
    def get_metadata(self, metadata: Any, directory: Any): ...
    cg: Any = ...
    def assert_cg_access(self) -> None: ...
    def assert_policy(self) -> None: ...
    def set_volume(self) -> None: ...
    def check_build_dir(self, delete: bool = ...) -> None: ...
    typeinfo: Any = ...
    def prep_build(self, token: Optional[Any] = ...): ...
    def get_build(self, token: Optional[Any] = ...): ...
    def update_build(self): ...
    def import_metadata(self) -> None: ...
    br_prep: Any = ...
    def prep_brs(self) -> None: ...
    brmap: Any = ...
    def import_brs(self) -> None: ...
    def prep_buildroot(self, brdata: Any): ...
    def import_buildroot(self, entry: Any): ...
    def match_components(self, components: Any): ...
    def match_rpm(self, comp: Any): ...
    def match_file(self, comp: Any): ...
    def match_kojifile(self, comp: Any): ...
    prepped_outputs: Any = ...
    def prep_outputs(self) -> None: ...
    def import_outputs(self) -> None: ...
    def prep_archive(self, fileinfo: Any) -> None: ...
    def import_rpm(self, buildinfo: Any, brinfo: Any, fileinfo: Any) -> None: ...
    def import_log(self, buildinfo: Any, fileinfo: Any) -> None: ...
    def import_archive(self, buildinfo: Any, brinfo: Any, fileinfo: Any) -> None: ...
    def import_components(self, archive_id: Any, fileinfo: Any) -> None: ...

def add_external_rpm(rpminfo: Any, external_repo: Any, strict: bool = ...): ...
def import_build_log(fn: Any, buildinfo: Any, subdir: Optional[Any] = ...) -> None: ...
def import_rpm_file(fn: Any, buildinfo: Any, rpminfo: Any) -> None: ...
def merge_scratch(task_id: Any): ...
def get_archive_types(): ...
def get_archive_type(filename: Optional[Any] = ..., type_name: Optional[Any] = ..., type_id: Optional[Any] = ..., strict: bool = ...): ...
def add_archive_type(name: str, description: str, extensions: Any, compression_type: str) -> None: ...
def new_maven_build(build: Any, maven_info: Any) -> None: ...
def new_win_build(build_info: Any, win_info: Any) -> None: ...
def new_image_build(build_info: Any) -> None: ...
def new_typed_build(build_info: Any, btype: Any) -> None: ...
def import_archive(filepath: Any, buildinfo: Any, type: Any, typeInfo: Any, buildroot_id: Optional[Any] = ...): ...
def import_archive_internal(filepath: Any, buildinfo: Any, type: Any, typeInfo: Any, buildroot_id: Optional[Any] = ..., fileinfo: Optional[Any] = ...): ...
def add_rpm_sig(an_rpm: Any, sighdr: Any) -> None: ...
def delete_rpm_sig(rpminfo: Any, sigkey: Optional[Any] = ..., all_sigs: bool = ...) -> None: ...
def check_rpm_sig(an_rpm: Any, sigkey: Any, sighdr: Any) -> None: ...
def query_rpm_sigs(rpm_id: Optional[Any] = ..., sigkey: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
def write_signed_rpm(an_rpm: Any, sigkey: Any, force: bool = ...) -> None: ...
def query_history(tables: Optional[Any] = ..., **kwargs: Any): ...
def untagged_builds(name: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
def build_references(build_id: Any, limit: Optional[Any] = ..., lazy: bool = ...): ...
def delete_build(build: Any, strict: bool = ..., min_ref_age: int = ...): ...
def reset_build(build: Any) -> None: ...
def cancel_build(build_id: Any, cancel_task: bool = ...): ...
def get_notification_recipients(build: Any, tag_id: Any, state: Any): ...
def tag_notification(is_successful: Any, tag_id: Any, from_id: Any, build_id: Any, user_id: Any, ignore_success: bool = ..., failure_msg: str = ...): ...
def build_notification(task_id: Any, build_id: Any) -> None: ...
def get_build_notifications(user_id: Any): ...
def get_build_notification_blocks(user_id: Any): ...
def new_group(name: Any): ...
def add_group_member(group: Any, user: Any, strict: bool = ...) -> None: ...
def drop_group_member(group: Any, user: Any) -> None: ...
def get_group_members(group: Any): ...
def set_user_status(user: Any, status: Any) -> None: ...
def list_cgs(): ...
def grant_cg_access(user: Any, cg: Any, create: bool = ...) -> None: ...
def revoke_cg_access(user: Any, cg: Any) -> None: ...
def assert_cg(cg: Any, user: Optional[Any] = ...) -> None: ...
def get_event(): ...
def nextval(sequence: Any): ...

def parse_json(value: Any, desc: Optional[Any] = ..., errstr: Optional[Any] = ...): ...

class OperationTest(koji.policy.MatchTest):
    name: str = ...
    field: str = ...

def policy_get_user(data: Any): ...
def policy_get_pkg(data: Any): ...
def policy_get_version(data: Any): ...
def policy_get_release(data: Any): ...
def policy_get_brs(data: Any): ...
def policy_get_cgs(data: Any): ...
def policy_get_build_tags(data: Any, taginfo: bool = ...): ...
def policy_get_build_types(data: Any): ...

class NewPackageTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class PackageTest(koji.policy.MatchTest):
    name: str = ...
    field: str = ...
    def run(self, data: Any): ...

class VersionTest(koji.policy.MatchTest):
    name: str = ...
    field: str = ...
    def run(self, data: Any): ...

class ReleaseTest(koji.policy.MatchTest):
    name: str = ...
    field: str = ...
    def run(self, data: Any): ...

class VolumeTest(koji.policy.MatchTest):
    name: str = ...
    field: str = ...
    def run(self, data: Any): ...

class CGMatchAnyTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class CGMatchAllTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class TagTest(koji.policy.MatchTest):
    name: str = ...
    field: str = ...
    def get_tag(self, data: Any): ...
    def run(self, data: Any): ...

class FromTagTest(TagTest):
    name: str = ...
    def get_tag(self, data: Any): ...

class HasTagTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class SkipTagTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class BuildTagTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class BuildTagInheritsFromTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class BuildTypeTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class ImportedTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class ChildTaskTest(koji.policy.BoolTest):
    name: str = ...
    field: str = ...

class MethodTest(koji.policy.MatchTest):
    name: str = ...
    field: str = ...

class UserTest(koji.policy.MatchTest):
    name: str = ...
    field: str = ...
    def run(self, data: Any): ...

class VMTest(koji.policy.MatchTest):
    name: str = ...
    field: str = ...

class IsBuildOwnerTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class UserInGroupTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class HasPermTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def run(self, data: Any): ...

class SourceTest(koji.policy.MatchTest):
    name: str = ...
    field: str = ...
    def run(self, data: Any): ...

class PolicyTest(koji.policy.BaseSimpleTest):
    name: str = ...
    def __init__(self, str: Any) -> None: ...
    def run(self, data: Any): ...

def check_policy(name: Any, data: Any, default: str = ..., strict: bool = ..., force: bool = ...): ...
def eval_policy(name: Any, data: Any): ...
def policy_data_from_task(task_id: Any): ...
def policy_data_from_task_args(method: Any, arglist: Any): ...
def assert_policy(name: Any, data: Any, default: str = ..., force: bool = ...) -> None: ...
def rpmdiff(basepath: Any, rpmlist: Any, hashes: Any) -> None: ...
def importImageInternal(task_id: Any, build_info: Any, imgdata: Any) -> None: ...

class RootExports:
    def restartHosts(self, priority: int = ..., options: Optional[Any] = ...): ...
    def build(self, src: Any, target: Any, opts: Optional[Any] = ..., priority: Optional[Any] = ..., channel: Optional[Any] = ...): ...
    def chainBuild(self, srcs: Any, target: Any, opts: Optional[Any] = ..., priority: Optional[Any] = ..., channel: Optional[Any] = ...): ...
    def mavenBuild(self, url: Any, target: Any, opts: Optional[Any] = ..., priority: Optional[Any] = ..., channel: str = ...): ...
    def wrapperRPM(self, build: Any, url: Any, target: Any, priority: Optional[Any] = ..., channel: str = ..., opts: Optional[Any] = ...): ...
    def chainMaven(self, builds: Any, target: Any, opts: Optional[Any] = ..., priority: Optional[Any] = ..., channel: str = ...): ...
    def winBuild(self, vm: Any, url: Any, target: Any, opts: Optional[Any] = ..., priority: Optional[Any] = ..., channel: str = ...): ...
    def buildImage(self, name: Any, version: Any, arch: Any, target: Any, ksfile: Any, img_type: Any, opts: Optional[Any] = ..., priority: Optional[Any] = ...): ...
    def buildImageIndirection(self, opts: Optional[Any] = ..., priority: Optional[Any] = ...): ...
    def buildImageOz(self, name: Any, version: Any, arches: Any, target: Any, inst_tree: Any, opts: Optional[Any] = ..., priority: Optional[Any] = ...): ...
    def hello(self, *args: Any): ...
    def fault(self) -> None: ...
    def error(self) -> None: ...
    def echo(self, *args: Any): ...
    def getKojiVersion(self): ...
    def getAPIVersion(self): ...
    def mavenEnabled(self): ...
    def winEnabled(self): ...
    def showSession(self): ...
    def getSessionInfo(self): ...
    def showOpts(self): ...
    def getEvent(self, id: Any): ...
    def getLastEvent(self, before: Optional[Any] = ...): ...
    evalPolicy: Any = ...
    def makeTask(self, *args: Any, **opts: Any): ...
    def uploadFile(self, path: Any, name: Any, size: Any, md5sum: Any, offset: Any, data: Any, volume: Optional[Any] = ..., checksum: Optional[Any] = ...): ...
    def checkUpload(self, path: Any, name: Any, verify: Optional[Any] = ..., tail: Optional[Any] = ..., volume: Optional[Any] = ...): ...
    def downloadTaskOutput(self, taskID: Any, fileName: Any, offset: int = ..., size: int = ..., volume: Optional[Any] = ...): ...
    listTaskOutput: Any = ...
    createTag: Any = ...
    editTag: Any = ...
    editTag2: Any = ...
    deleteTag: Any = ...
    createExternalRepo: Any = ...
    listExternalRepos: Any = ...
    getExternalRepo: Any = ...
    editExternalRepo: Any = ...
    deleteExternalRepo: Any = ...
    def addExternalRepoToTag(self, tag_info: Any, repo_info: Any, priority: Any, merge_mode: str = ..., arches: Optional[Any] = ...) -> None: ...
    def removeExternalRepoFromTag(self, tag_info: Any, repo_info: Any) -> None: ...
    editTagExternalRepo: Any = ...
    getTagExternalRepos: Any = ...
    getExternalRepoList: Any = ...
    resetBuild: Any = ...
    def importArchive(self, filepath: Any, buildinfo: Any, type: Any, typeInfo: Any) -> None: ...
    CGInitBuild: Any = ...
    CGRefundBuild: Any = ...
    CGImport: Any = ...
    untaggedBuilds: Any = ...
    queryHistory: Any = ...
    deleteBuild: Any = ...
    def buildReferences(self, build: Any, limit: Optional[Any] = ..., lazy: bool = ...): ...
    addVolume: Any = ...
    removeVolume: Any = ...
    listVolumes: Any = ...
    changeBuildVolume: Any = ...
    def getVolume(self, volume: Any, strict: bool = ...): ...
    def applyVolumePolicy(self, build: Any, strict: bool = ...): ...
    def createEmptyBuild(self, name: Any, version: Any, release: Any, epoch: Any, owner: Optional[Any] = ...): ...
    def createMavenBuild(self, build_info: Any, maven_info: Any) -> None: ...
    def createWinBuild(self, build_info: Any, win_info: Any) -> None: ...
    def createImageBuild(self, build_info: Any) -> None: ...
    def importRPM(self, path: Any, basename: Any) -> None: ...
    def mergeScratch(self, task_id: Any): ...
    def addExternalRPM(self, rpminfo: Any, external_repo: Any, strict: bool = ...) -> None: ...
    def tagBuildBypass(self, tag: Any, build: Any, force: bool = ..., notify: bool = ...) -> None: ...
    def tagBuild(self, tag: Any, build: Any, force: bool = ..., fromtag: Optional[Any] = ...): ...
    def untagBuild(self, tag: Any, build: Any, strict: bool = ..., force: bool = ...) -> None: ...
    def untagBuildBypass(self, tag: Any, build: Any, strict: bool = ..., force: bool = ..., notify: bool = ...) -> None: ...
    def moveBuild(self, tag1: Any, tag2: Any, build: Any, force: bool = ...): ...
    def moveAllBuilds(self, tag1: Any, tag2: Any, package: Any, force: bool = ...): ...
    listTags: Any = ...
    getBuild: Any = ...
    getBuildLogs: Any = ...
    getNextRelease: Any = ...
    getMavenBuild: Any = ...
    getWinBuild: Any = ...
    getImageBuild: Any = ...
    getBuildType: Any = ...
    getArchiveTypes: Any = ...
    getArchiveType: Any = ...
    listArchives: Any = ...
    getArchive: Any = ...
    getMavenArchive: Any = ...
    getWinArchive: Any = ...
    getImageArchive: Any = ...
    listArchiveFiles: Any = ...
    getArchiveFile: Any = ...
    listBTypes: Any = ...
    addBType: Any = ...
    addArchiveType: Any = ...
    def getChangelogEntries(self, buildID: Optional[Any] = ..., taskID: Optional[Any] = ..., filepath: Optional[Any] = ..., author: Optional[Any] = ..., before: Optional[Any] = ..., after: Optional[Any] = ..., queryOpts: Optional[Any] = ..., strict: bool = ...): ...
    def cancelBuild(self, buildID: Any): ...
    def assignTask(self, task_id: Any, host: Any, force: bool = ...): ...
    def freeTask(self, task_id: Any) -> None: ...
    def cancelTask(self, task_id: Any, recurse: bool = ...) -> None: ...
    def cancelTaskFull(self, task_id: Any, strict: bool = ...) -> None: ...
    def cancelTaskChildren(self, task_id: Any) -> None: ...
    def setTaskPriority(self, task_id: Any, priority: Any, recurse: bool = ...) -> None: ...
    def listTagged(self, tag: Any, event: Optional[Any] = ..., inherit: bool = ..., prefix: Optional[Any] = ..., latest: bool = ..., package: Optional[Any] = ..., owner: Optional[Any] = ..., type: Optional[Any] = ...): ...
    def listTaggedRPMS(self, tag: Any, event: Optional[Any] = ..., inherit: bool = ..., latest: bool = ..., package: Optional[Any] = ..., arch: Optional[Any] = ..., rpmsigs: bool = ..., owner: Optional[Any] = ..., type: Optional[Any] = ...): ...
    def listTaggedArchives(self, tag: Any, event: Optional[Any] = ..., inherit: bool = ..., latest: bool = ..., package: Optional[Any] = ..., type: Optional[Any] = ...): ...
    def listBuilds(self, packageID: Optional[Any] = ..., userID: Optional[Any] = ..., taskID: Optional[Any] = ..., prefix: Optional[Any] = ..., state: Optional[Any] = ..., volumeID: Optional[Any] = ..., source: Optional[Any] = ..., createdBefore: Optional[Any] = ..., createdAfter: Optional[Any] = ..., completeBefore: Optional[Any] = ..., completeAfter: Optional[Any] = ..., type: Optional[Any] = ..., typeInfo: Optional[Any] = ..., queryOpts: Optional[Any] = ..., pattern: Optional[Any] = ...): ...
    def getLatestBuilds(self, tag: Any, event: Optional[Any] = ..., package: Optional[Any] = ..., type: Optional[Any] = ...): ...
    def getLatestRPMS(self, tag: Any, package: Optional[Any] = ..., arch: Optional[Any] = ..., event: Optional[Any] = ..., rpmsigs: bool = ..., type: Optional[Any] = ...): ...
    def getLatestMavenArchives(self, tag: Any, event: Optional[Any] = ..., inherit: bool = ...): ...
    def getAverageBuildDuration(self, package: Any, age: Optional[Any] = ...): ...
    packageListAdd: Any = ...
    packageListRemove: Any = ...
    packageListBlock: Any = ...
    packageListUnblock: Any = ...
    packageListSetOwner: Any = ...
    packageListSetArches: Any = ...
    groupListAdd: Any = ...
    groupListRemove: Any = ...
    groupListBlock: Any = ...
    groupListUnblock: Any = ...
    groupPackageListAdd: Any = ...
    groupPackageListRemove: Any = ...
    groupPackageListBlock: Any = ...
    groupPackageListUnblock: Any = ...
    groupReqListAdd: Any = ...
    groupReqListRemove: Any = ...
    groupReqListBlock: Any = ...
    groupReqListUnblock: Any = ...
    getTagGroups: Any = ...
    checkTagAccess: Any = ...
    def getInheritanceData(self, tag: Any, event: Optional[Any] = ...): ...
    def setInheritanceData(self, tag: Any, data: Any, clear: bool = ...): ...
    def getFullInheritance(self, tag: Any, event: Optional[Any] = ..., reverse: bool = ...): ...
    listRPMs: Any = ...
    def listBuildRPMs(self, build: Any): ...
    getRPM: Any = ...
    def getRPMDeps(self, rpmID: Any, depType: Optional[Any] = ..., queryOpts: Optional[Any] = ..., strict: bool = ...): ...
    def listRPMFiles(self, rpmID: Any, queryOpts: Optional[Any] = ...): ...
    def getRPMFile(self, rpmID: Any, filename: Any, strict: bool = ...): ...
    def getRPMHeaders(self, rpmID: Optional[Any] = ..., taskID: Optional[Any] = ..., filepath: Optional[Any] = ..., headers: Optional[Any] = ...): ...
    queryRPMSigs: Any = ...
    def writeSignedRPM(self, an_rpm: Any, sigkey: Any, force: bool = ...): ...
    def addRPMSig(self, an_rpm: Any, data: Any): ...
    def deleteRPMSig(self, rpminfo: Any, sigkey: Optional[Any] = ..., all_sigs: bool = ...): ...
    findBuildID: Any = ...
    getTagID: Any = ...
    getTag: Any = ...
    def getPackageID(self, name: Any, strict: bool = ...): ...
    getPackage: Any = ...
    def listPackages(self, tagID: Optional[Any] = ..., userID: Optional[Any] = ..., pkgID: Optional[Any] = ..., prefix: Optional[Any] = ..., inherited: bool = ..., with_dups: bool = ..., event: Optional[Any] = ..., queryOpts: Optional[Any] = ..., with_owners: bool = ...): ...
    def listPackagesSimple(self, prefix: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
    def checkTagPackage(self, tag: Any, pkg: Any): ...
    def getPackageConfig(self, tag: Any, pkg: Any, event: Optional[Any] = ...): ...
    getUser: Any = ...
    editUser: Any = ...
    def grantPermission(self, userinfo: Any, permission: Any, create: bool = ...) -> None: ...
    def revokePermission(self, userinfo: Any, permission: Any) -> None: ...
    def createUser(self, username: Any, status: Optional[Any] = ..., krb_principal: Optional[Any] = ...): ...
    def addUserKrbPrincipal(self, user: Any, krb_principal: Any): ...
    def removeUserKrbPrincipal(self, user: Any, krb_principal: Any): ...
    def enableUser(self, username: Any) -> None: ...
    def disableUser(self, username: Any) -> None: ...
    listCGs: Any = ...
    grantCGAccess: Any = ...
    revokeCGAccess: Any = ...
    newGroup: Any = ...
    addGroupMember: Any = ...
    dropGroupMember: Any = ...
    getGroupMembers: Any = ...
    def listUsers(self, userType: Any = ..., prefix: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
    def getBuildConfig(self, tag: Any, event: Optional[Any] = ...): ...
    def getRepo(self, tag: Any, state: Optional[Any] = ..., event: Optional[Any] = ..., dist: bool = ...): ...
    repoInfo: Any = ...
    getActiveRepos: Any = ...
    def distRepo(self, tag: Any, keys: Any, **task_opts: Any): ...
    def newRepo(self, tag: Any, event: Optional[Any] = ..., src: bool = ..., debuginfo: bool = ..., separate_src: bool = ...): ...
    def repoExpire(self, repo_id: Any) -> None: ...
    def repoDelete(self, repo_id: Any): ...
    def repoProblem(self, repo_id: Any) -> None: ...
    tagChangedSinceEvent: Any = ...
    createBuildTarget: Any = ...
    editBuildTarget: Any = ...
    deleteBuildTarget: Any = ...
    getBuildTargets: Any = ...
    getBuildTarget: Any = ...
    def taskFinished(self, taskId: Any): ...
    def getTaskRequest(self, taskId: Any): ...
    def getTaskResult(self, taskId: Any, raise_fault: bool = ...): ...
    def getTaskInfo(self, task_id: Any, request: bool = ..., strict: bool = ...): ...
    def getTaskChildren(self, task_id: Any, request: bool = ..., strict: bool = ...): ...
    def getTaskDescendents(self, task_id: Any, request: bool = ...): ...
    def listTasks(self, opts: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
    def taskReport(self, owner: Optional[Any] = ...): ...
    def resubmitTask(self, taskID: Any): ...
    def addHost(self, hostname: Any, arches: Any, krb_principal: Optional[Any] = ..., force: bool = ...): ...
    def enableHost(self, hostname: Any) -> None: ...
    def disableHost(self, hostname: Any) -> None: ...
    def enableChannel(self, channelname: Any, comment: Optional[Any] = ...) -> None: ...
    def disableChannel(self, channelname: Any, comment: Optional[Any] = ...) -> None: ...
    getHost: Any = ...
    editHost: Any = ...
    addHostToChannel: Any = ...
    removeHostFromChannel: Any = ...
    renameChannel: Any = ...
    editChannel: Any = ...
    removeChannel: Any = ...
    addChannel: Any = ...
    def listHosts(self, arches: Optional[Any] = ..., channelID: Optional[Any] = ..., ready: Optional[Any] = ..., enabled: Optional[Any] = ..., userID: Optional[Any] = ..., queryOpts: Optional[Any] = ...): ...
    def getLastHostUpdate(self, hostID: Any, ts: bool = ...): ...
    getAllArches: Any = ...
    getChannel: Any = ...
    listChannels: Any = ...
    getBuildroot: Any = ...
    def getBuildrootListing(self, id: Any): ...
    listBuildroots: Any = ...
    def hasPerm(self, perm: Any, strict: bool = ...): ...
    def getPerms(self): ...
    def getUserPerms(self, userID: Optional[Any] = ...): ...
    def getAllPerms(self): ...
    def getLoggedInUser(self): ...
    def setBuildOwner(self, build: Any, user: Any) -> None: ...
    def setBuildTimestamp(self, build: Any, ts: Any) -> None: ...
    def count(self, methodName: Any, *args: Any, **kw: Any): ...
    def filterResults(self, methodName: Any, *args: Any, **kw: Any): ...
    def countAndFilterResults(self, methodName: Any, *args: Any, **kw: Any): ...
    def getBuildNotifications(self, userID: Optional[Any] = ...): ...
    def getBuildNotification(self, id: Any, strict: bool = ...): ...
    def getBuildNotificationBlocks(self, userID: Optional[Any] = ...): ...
    def getBuildNotificationBlock(self, id: Any, strict: bool = ...): ...
    def updateNotification(self, id: Any, package_id: Any, tag_id: Any, success_only: Any) -> None: ...
    def createNotification(self, user_id: Any, package_id: Any, tag_id: Any, success_only: Any) -> None: ...
    def deleteNotification(self, id: Any) -> None: ...
    def createNotificationBlock(self, user_id: Any, package_id: Optional[Any] = ..., tag_id: Optional[Any] = ...) -> None: ...
    def deleteNotificationBlock(self, id: Any) -> None: ...
    def search(self, terms: Any, type: Any, matchType: Any, queryOpts: Optional[Any] = ...): ...

class BuildRoot:
    id: Any = ...
    def __init__(self, id: Optional[Any] = ...) -> None: ...
    data: Any = ...
    is_standard: bool = ...
    def load(self, id: Any) -> None: ...
    def new(self, host: Any, repo: Any, arch: Any, task_id: Optional[Any] = ..., ctype: str = ...): ...
    def cg_new(self, data: Any): ...
    def assertStandard(self) -> None: ...
    def verifyTask(self, task_id: Any): ...
    def assertTask(self, task_id: Any) -> None: ...
    def verifyHost(self, host_id: Any): ...
    def assertHost(self, host_id: Any) -> None: ...
    def setState(self, state: Any) -> None: ...
    def getList(self): ...
    def setList(self, rpmlist: Any) -> None: ...
    def updateList(self, rpmlist: Any) -> None: ...
    def getArchiveList(self, queryOpts: Optional[Any] = ...): ...
    def updateArchiveList(self, archives: Any, project: bool = ...) -> None: ...
    def setTools(self, tools: Any) -> None: ...

class Host:
    id: int = ...
    same_host: bool = ...
    def __init__(self,
                 id: Optional[int] = ...) -> None:
        ...
    def verify(self) -> bool: ...
    def taskUnwait(self, parent: int) -> None: ...
    def taskSetWait(self, parent: int, tasks: list[int]) -> None: ...
    def taskWaitCheck(self, parent: int) -> tuple[list[int], list[int]]: ...
    def taskWait(self, parent: int) -> list[list[int]]: ...
    def taskWaitResults(self,
                        parent: int,
                        tasks: list[int],
                        canfail: Optional[bool] = ...): ...
    def getHostTasks(self) -> list[dict]: ...
    def updateHost(self,
                   task_load: float,
                   ready: bool) -> None: ...
    def getLoadData(self) -> list[list]: ...
    def isEnabled(self) -> bool: ...

class HostExports:
    def getID(self) -> int: ...
    def updateHost(self,
                   task_load: float,
                   ready: bool) -> None: ...
    def getLoadData(self): ...
    def getHost(self): ...
    def openTask(self, task_id: Any): ...
    def closeTask(self, task_id: Any, response: Any): ...
    def failTask(self, task_id: Any, response: Any): ...
    def freeTasks(self, tasks: Any) -> None: ...
    def setTaskWeight(self, task_id: Any, weight: Any): ...
    def getHostTasks(self): ...
    def taskSetWait(self, parent: Any, tasks: Any): ...
    def taskWait(self, parent: Any): ...
    def taskWaitResults(self, parent: Any, tasks: Any, canfail: Optional[Any] = ...): ...
    def subtask(self, method: Any, arglist: Any, parent: Any, **opts: Any): ...
    def subtask2(self, __parent: Any, __taskopts: Any, __method: Any, *args: Any, **opts: Any): ...
    def moveBuildToScratch(self, task_id: Any, srpm: Any, rpms: Any, logs: Optional[Any] = ...) -> None: ...
    def moveMavenBuildToScratch(self, task_id: Any, results: Any, rpm_results: Any) -> None: ...
    def moveWinBuildToScratch(self, task_id: Any, results: Any, rpm_results: Any) -> None: ...
    def moveImageBuildToScratch(self, task_id: Any, results: Any) -> None: ...
    def initBuild(self, data: Any): ...
    def completeBuild(self, task_id: Any, build_id: Any, srpm: Any, rpms: Any, brmap: Optional[Any] = ..., logs: Optional[Any] = ...): ...
    def completeImageBuild(self, task_id: Any, build_id: Any, results: Any) -> None: ...
    def initMavenBuild(self, task_id: Any, build_info: Any, maven_info: Any): ...
    def createMavenBuild(self, build_info: Any, maven_info: Any) -> None: ...
    def completeMavenBuild(self, task_id: Any, build_id: Any, maven_results: Any, rpm_results: Any) -> None: ...
    def importArchive(self, filepath: Any, buildinfo: Any, type: Any, typeInfo: Any) -> None: ...
    def importWrapperRPMs(self, task_id: Any, build_id: Any, rpm_results: Any) -> None: ...
    def initImageBuild(self, task_id: Any, build_info: Any): ...
    def initWinBuild(self, task_id: Any, build_info: Any, win_info: Any): ...
    def completeWinBuild(self, task_id: Any, build_id: Any, results: Any, rpm_results: Any) -> None: ...
    def failBuild(self, task_id: Any, build_id: Any) -> None: ...
    def tagBuild(self, task_id: Any, tag: Any, build: Any, force: bool = ..., fromtag: Optional[Any] = ...) -> None: ...
    def importImage(self, task_id: Any, build_info: Any, results: Any) -> None: ...
    def tagNotification(self, is_successful: Any, tag_id: Any, from_id: Any, build_id: Any, user_id: Any, ignore_success: bool = ..., failure_msg: str = ...) -> None: ...
    def checkPolicy(self, name: Any, data: Any, default: str = ..., strict: bool = ...): ...
    def assertPolicy(self, name: Any, data: Any, default: str = ...) -> None: ...
    def evalPolicy(self, name: Any, data: Any): ...
    def newBuildRoot(self, repo: Any, arch: Any, task_id: Optional[Any] = ...): ...
    def setBuildRootState(self, brootid: Any, state: Any, task_id: Optional[Any] = ...): ...
    def setBuildRootList(self, brootid: Any, rpmlist: Any, task_id: Optional[Any] = ...): ...
    def updateBuildRootList(self, brootid: Any, rpmlist: Any, task_id: Optional[Any] = ...): ...
    def updateBuildrootArchives(self, brootid: Any, task_id: Any, archives: Any, project: bool = ...): ...
    def updateMavenBuildRootList(self, brootid: Any, task_id: Any, mavenlist: Any, ignore: Optional[Any] = ..., project: bool = ..., ignore_unknown: bool = ..., extra_deps: Optional[Any] = ...): ...
    def repoInit(self, tag: Any, task_id: Optional[Any] = ..., with_src: bool = ..., with_debuginfo: bool = ..., event: Optional[Any] = ..., with_separate_src: bool = ...): ...
    def repoDone(self, repo_id: Any, data: Any, expire: bool = ...) -> None: ...
    def distRepoMove(self, repo_id: Any, uploadpath: Any, arch: Any) -> None: ...
    def isEnabled(self): ...

def get_upload_path(reldir: Any, name: Any, create: bool = ..., volume: Optional[Any] = ...): ...
def get_verify_class(verify: Any): ...
def handle_upload(environ: Any): ...
